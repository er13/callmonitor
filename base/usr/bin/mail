#! /usr/bin/env ash
##
## Callmonitor for Fritz!Box (callmonitor)
## 
## Copyright (C) 2005--2008  Andreas BÃ¼hmann <buehmann@users.berlios.de>
## 
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2 of the License, or
## (at your option) any later version.
## 
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
## 
## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
## 
## http://developer.berlios.de/projects/callmonitor/
##
readonly PROGRAM="mail"
readonly SPOOL="/var/spool/mail"
readonly MAILER="/sbin/mailer"
readonly TMP="/var/tmp/$PROGRAM"

usage() {
#<
    cat <<EOF
Usage: $PROGRAM {send|sendonce|enqueue} [MAILER_OPTION]...
       $PROGRAM {process|config|list}
EOF
#>
    echo
    "$MAILER" -? 2>&1 | grep -v "^  -[MpD] "
}

mkdir -p "$SPOOL"

## apply a function to each item in a comma-separated list
foreach() {
    local - list=$1 IFS=,
    alias func=$2
    set -f
    for item in $1; do
	eval 'func "$item"'
    done
    unalias func
}

## add an item to a comma-separated list
add() {
    local name=$1 item=$2
    eval "$name=\"\$$name\${$name:+,}\$item\""
}

escape() {
    echo "$1" | sed -e "s/'/'\\\\''/g;1s/^/'/;\$s/$/'/"
}

process_mail() {
    local id=$1
    trap "spool $id" EXIT
    local dir=$TMP/$id
    local tmparchive=$dir.tar.gz
    unspool $id || return 1
    if send $id; then
	remove $id
    else
	spool $id
    fi
    trap "" EXIT
}

## try to send a mail that has been prepared
send() (
    local id=$1
    local dir=$TMP/$id
    cd "$dir"
    ./send
    return $?
)

## remove a mail that should not be send again (it does not matter what state
## the mail is in)
remove() {
    local id=$1
    local dir=$TMP/$id
    local archive=$SPOOL/$id.tar.gz
    local tmparchive=$dir.tar.gz
    rm -f "$archive" "$tmparchive"
    rm -rf "$dir"
}

## move mail to spool directory for later processing (and clean up)
spool() {
    local id=$1
    local dir=$TMP/$id
    local tmparchive=$TMP/$id.tar.gz
    if [ ! -e "$tmparchive" ]; then
	pack $id
    fi
    ln "$tmparchive" "$SPOOL"/ && rm "$tmparchive"
    if [ -d "$dir" ]; then
	rm -rf "$dir"
    fi
}
unspool() {
    local id=$1
    local archive=$SPOOL/$id.tar.gz
    ln "$archive" "$TMP"/ && rm "$archive"
    unpack $id
}

prepare_mail() {
    local id=$1 TEMP
    local dir=$TMP/$id
    mkdir -p "$dir"
    COUNT=0
    save_attachment() {
	local file=$1 realpath
	local basename=$(basename "$file")
	case $file in 
	    -)
		basename="stdin.txt"
		realpath="-"
	    ;; 
	    *) realpath=$(realpath "$file") ;;
	esac
	local subdir=$COUNT
	local target=$dir/$subdir/$basename
	mkdir "$dir/$subdir"
	case $realpath in
	    /var/*|-) cat "$file" > "$target" ;;
	    *)	ln -s "$realpath" "$target" ;;
	esac
	add TEMP "$subdir/$basename"
	let COUNT++
    }
    if let "${ATTACHMENTS+1}"; then
	unset -v TEMP
	foreach "$ATTACHMENTS" save_attachment
	ATTACHMENTS=$TEMP
    fi
    if let "${INLINES+1}"; then
	unset -v TEMP
	foreach "$INLINES" save_attachment
	INLINES=$TEMP
    fi
    set -- "$MAILER" \
	${SUBJECT+     "-s" "$SUBJECT"} \
	${FROM+        "-f" "$FROM"} \
	${TO+	       "-t" "$TO"} \
	${MAILSERVER+  "-m" "$MAILSERVER"} \
	${AUTHNAME+    "-a" "$AUTHNAME"} \
	${PASSWORD+    "-w" "$PASSWORD"} \
	${ATTACHMENTS+ "-d" "$ATTACHMENTS"} \
	${INLINES+     "-i" "$INLINES"} \
	${RELATED+     "-r"} \
	${STARTTLS+    "-l"}
    script=$dir/send
    {
	printf "#! /usr/bin/env ash\n"
	for arg in "$@"; do
	    printf "%s " "$(escape "$arg")"
	done
	printf "\n"
    } > "$script"
    chmod +x "$script"
}

pack() {
    local id=$1
    local dir=$TMP/$id
    local archive=$dir.tar.gz
    tar czf "$archive" -C "$TMP" $id && rm -r "$dir"
}
unpack() {
    local id=$1
    local dir=$TMP/$id
    local archive=$dir.tar.gz
    tar xzf "$archive" -C "$TMP"
}

unset -v From To SMTPServer accountname passwd

## requires /usr/bin/cfg2sh
config() {
    cfg2sh ar7 emailnotify | sed 's/^emailnotify_//'
}

trap 'exit 2' HUP INT QUIT TERM
unset SUBJECT FROM TO MAILSERVER AUTHNAME PASSWORD ATTACHMENTS INLINES RELATED
unset STARTTLS
case $1 in
    send|sendonce|enqueue) 
	## use push service configuration per default
	eval "$(config)"
	FROM=$From
	TO=$To
	MAILSERVER=$SMTPServer
	if let "${accountname:+1}"; then
	    AUTHNAME=$accountname
	fi
	if let "${passwd:+1}"; then
	    PASSWORD=$passwd
	fi
	if let "${starttls:+1}"; then
	    STARTTLS=$starttls
	fi

	## parse command line options
	TEMP=$(getopt -o 's:f:t:m:a:w:d:i:rl' -n "$PROGRAM" -- "$@")
	if let "$? != 0"; then 
	    usage >&2
	    exit 1
	fi
	eval "set -- $TEMP"

	while true; do
	    case $1 in
		-s) SUBJECT=$2; shift 2 ;;
		-f) FROM=$2; shift 2 ;;
		-t) TO=$2; shift 2 ;;
		-m) MAILSERVER=$2; shift 2 ;;
		-a) AUTHNAME=$2; shift 2 ;;
		-w) PASSWORD=$2; shift 2 ;;
		-d) ATTACHMENTS=$2; shift 2 ;;
		-i) INLINES=$2; shift 2 ;;
		-r) RELATED=yes; shift 1 ;;
		-l) STARTTLS=yes; shift 1 ;;
		--) shift; break ;;
	    esac
	done
	[ "$RELATED" == yes ] || unset RELATED
	[ "$STARTTLS" == yes ] || unset STARTTLS
	id=$(date +%s)-$$
	case $1 in
	    send|enqueue)
		trap "spool $id" EXIT
		;;
	    sendonce)
		trap "remove $id" EXIT
		;;
	esac
	prepare_mail $id
	;;
esac
case $1 in
    send)
	if send $id; then
	    remove $id
	else
	    spool $id
	fi
	;;
    sendonce)
	send $id
	remove $id
	;;
    enqueue)
	spool $id
	;;
    process)
	for mail in "$SPOOL"/*; do
	    if [ ! -e "$mail" ]; then continue; fi
	    id=$(basename "$mail" .tar.gz)
	    process_mail $id
	done
	;;
    config)
	config
	;;
    list)
	ls -l "$SPOOL"
	;;
    *)
	usage >&2
	exit 1
	;;
esac
trap "" EXIT
exit 0
